name: ðŸ§‘ðŸ’» Developer Routine

on:
  schedule:
    - cron: '37 14 * * *'  # Random afternoon time
  workflow_dispatch:

jobs:
  coding_session:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate stealth file
      id: ghost_coder
      run: |
        # Disguised filename pattern
        DAY_CODE=$(date +'%m%d')
        FILE_NAME="src/experiment_${DAY_CODE}.cpp"
        
        # Random commit messages that sound human
        COMMIT_MSGS=(
          "Testing random number approach"
          "Quick experiment with rand()"
          "Number generator prototype"
          "Testing something"
          "Temporary test file"
          "Experimental code snippet"
        )
        RAND_MSG=${COMMIT_MSGS[$RANDOM % ${#COMMIT_MSGS[@]}]}
        
        # Generate the C++ code with varying styles
        RAND_STYLE=$((RANDOM % 3))
        case $RAND_STYLE in
          0)
            CODE_CONTENT='#include <cstdio>
#include <ctime>
#include <cstdlib>

/* Quick test */
int main() {
  srand(time(nullptr));
  printf("Result: %d\n", 1 + rand() % 100);
}'
            ;;
          1)
            CODE_CONTENT='// Random test
#include <iostream>
using namespace std;

int main() {
  srand(time(0));
  cout << "Value: " << 1+(rand()%100) << endl;
}'
            ;;
          *)
            CODE_CONTENT='#include <iostream>
#include <random>

int main() {
  std::random_device rd;
  std::cout << rd() % 100 << '\n';
}'
            ;;
        esac

        echo "file_name=${FILE_NAME}" >> $GITHUB_OUTPUT
        echo "commit_msg=${RAND_MSG}" >> $GITHUB_OUTPUT
        echo "content<<EOF" >> $GITHUB_OUTPUT
        echo "${CODE_CONTENT}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Commit changes
      run: |
        mkdir -p src
        echo "${{ steps.ghost_coder.outputs.content }}" > "${{ steps.ghost_coder.outputs.file_name }}"
        
        git config --global user.name "Dev User"
        git config --global user.email "dev@example.com"
        git add "${{ steps.ghost_coder.outputs.file_name }}"
        git commit -m "${{ steps.ghost_coder.outputs.commit_msg }}"
        git push
